// luo jie
#include <bits/stdc++.h>

#define fi first
#define se second
#define all(a) (a).begin(), (a).end()
#define mkp(x, y) make_pair((x), (y))

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;

const int N = 2510;

struct Rec {
	int id;
	set<int> has;
	set<PII> trait;
	bool operator < (const Rec &o)const {
		return id < o.id;
	}
} user[N];

int n;

int GetPos(string s) {
	int cnt = 0;
	for(int i = 1; i < s.size(); i ++) {
		if(s[i] == '(') 
			cnt ++;
		else if(s[i] == ')') {
			cnt --;
			if(!cnt) {
				return i;
			}
		}
	}
	return 0;
}
bool Check(Rec a, string s) {
	if(s[0] == '&' || s[0] == '|') {
		int p = GetPos(s);
		if(s[0] == '&') {
//			cout << s.substr(2, p-2) << ' ' << s.substr(p+2, s.size()-p-3) << '\n';
			return Check(a, s.substr(2, p-2)) && Check(a, s.substr(p+2, s.size()-p-3));
		}
		else {
//			cout << s.substr(2, p-2) << ' ' << s.substr(p+2, s.size()-p-3) << '\n';
			return Check(a, s.substr(2, p-2)) || Check(a, s.substr(p+2, s.size()-p-3));
		}
	}
	PII t = {0, 0};
	bool flag = false, isAlert = true;
	for(int i = 0; i < s.size(); i ++) {
		if(s[i] == ':' || s[i] == '~') {
			flag = true;
			isAlert = (s[i] == ':');
			continue;
		}
		if(!flag) {
			t.fi = t.fi*10+s[i]-'0';
		}
		else {
			t.se = t.se*10+s[i]-'0';
		}
	}
	return isAlert && a.trait.count(t) || !isAlert && a.has.count(t.fi) && !a.trait.count(t);
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n;
	for(int i = 0; i < n; i ++) {
		cin >> user[i].id;
		int tot;
		cin >> tot;
		while(tot --) {
			int x, y;
			cin >> x >> y;
			user[i].trait.insert({x, y});
			user[i].has.insert(x);
		}
//		cout << user[i].id << '\n';
//		for(auto x : user[i].trait)
//			cout << x.fi << ' ' << x.se << ' ';
//		cout << '\n';
	}
	sort(user, user+n);
	int m;
	cin >> m;
	while(m --) {
		string s;
		cin >> s;
		for(int i = 0; i < n; i ++) {
			if(Check(user[i], s)) 
				cout << user[i].id << ' ';
		}
		cout << '\n';
	}
	return 0;
}
/*
2
1 2 1 2 2 3
2 2 2 4 3 1
1
2~3
*/
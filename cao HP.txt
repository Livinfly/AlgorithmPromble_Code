#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>

using namespace std;

typedef long long LL;

const int N = 110, M = 125;

int n;
int f[N][M], ttt[M];

void addHH(int a[], int b[])
{
	static int c[M];
	memset(c, 0, sizeof c);
	for(int i = 0, t = 0; i < M; i ++)
	{
		t += a[i] + b[i];
		c[i] = t % 10;
		t /= 10;
	}
	memcpy(a, c, sizeof c);
}
void mul1(int res[], int a[], int b)
{
	static int c[M];
	memset(c, 0, sizeof c);
	for(int i = 0, t = 0; i < M; i ++)
	{
		t += a[i] * b;
		c[i] = t % 10;
		t /= 10;
	}
	memcpy(res, c, sizeof c);
}
void mul2(int res[], int a[], int b[])
{
	static int c[M];
	memset(c, 0, sizeof c);
	for(int i = 0; i < M / 2; i ++)
		for(int j = 0; j < M / 2; j ++)
			c[i + j] += a[i] * b[j];
	for(int i = 0, t = 0; i < M; i ++)
	{
		t += c[i];
		c[i] = t % 10;
		t /= 10;
	}
	memcpy(res, c, sizeof c);
}
void hpprint(int a[])
{
	int k = M - 1;
	while(k >= 0 && !a[k]) k --;
	while(k >= 0) printf("%d", a[k --]);
}

int main()
{
	f[0][0] = 1, f[1][0] = 1;
	for(int i = 2; i <= 100; i ++)
		for(int j = 0; j < i; j ++)
		{
			mul2(ttt, f[j], f[i - j - 1]);
			add(f[i], ttt);
		}
	
//	for(int i = 1; i <= 100; i ++) 
//	{
//		printf("f[%d] = ", i);
//		hpprint(f[n]);
//		puts("");
//	}
	
	int T = 0;
	while(cin >> n, n != -1)
	{
		mul1(ttt, f[n], 2);
		printf("%d %d ", ++ T, n);
		hpprint(ttt);
		puts("");
	}
	
	return 0;
}

void addHL(int a[], int b, int res[])
{
	static int c[M];
	memset(c, 0, sizeof c);
	int t = b;
	for(int i = 0; i < M; i ++)
	{
		t += a[i];
		c[i] = t % 10;
		t /= 10;
	}
	memcpy(res, c, sizeof c);
}
void mulHL(int a[], int b, int res[])
{
	static int c[M];
	memset(c, 0, sizeof c);
	int t = 0;
	for(int i = 0; i < M; i ++)
	{
		t += a[i] * b;
		c[i] = t % 10;
		t /= 10;
	}
	memcpy(res, c, sizeof c);
}
void mulHH(int a[], int b[], int res[])
{
	static int c[M];
	memset(c, 0, sizeof c);
	
	for(int i = 0; i < M; i ++)
		for(int j = 0; j < M; j ++)
			c[i + j] += a[i] * b[j];
	int t = 0;
	for(int i = 0; i < M; i ++)
	{
		t += c[i];
		c[i] = t % 10;
		t /= 10;
	}
	memcpy(res, c, sizeof c);
}
int cmpHH(int a[], int b[])
{
	for(int i = M - 1; i >= 0; i --)
	{
		if(a[i] > b[i]) return 1;
		if(a[i] < b[i]) return -1;
	}
	return 0;
}
void printH(int a[])
{
	int k = M - 1;
	while(k > 0 && !a[k]) k --;
	for(int i = k; i >= 0; i --)
		printf("%d", a[i]);
	puts("");
}